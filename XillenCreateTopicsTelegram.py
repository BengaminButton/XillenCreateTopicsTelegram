from telethon.sync import TelegramClient
from telethon.tl.functions.channels import CreateForumTopicRequest
from telethon.errors import SessionPasswordNeededError, FloodWaitError
import asyncio
import time
import os

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
API_ID = –í–ê–®_API_ID #–ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ç -> my.telegram.org
API_HASH = '–í–ê–®_API_HASH' #–ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ç -> my.telegram.org
SESSION_NAME = 'thm_session'
GROUP_ID = -1234567890  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# –¢–µ–º—ã —Å —ç–º–æ–¥–∑–∏
TOPICS = [
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"},
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"},
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"},
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"},
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"},
    {"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"}

#–ï—Å–ª–∏ –Ω–∞–¥–æ –±–æ–ª—å—à–µ —Ç–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å—Ç—Ä–æ–∫—É "{"title": "#–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "emoji": "—ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã"}" –∏ –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–æ–π ] –Ω—É –∫—Ä—á –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–æ

]

async def create_topics(client):
    print(f"–°–æ–∑–¥–∞—é —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}...")
    created_count = 0
    
    for topic in TOPICS:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
            result = await client(CreateForumTopicRequest(
                channel=GROUP_ID,
                title=topic["title"],
                icon_emoji_id=0  # 0 = —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
            ))
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic['title']}")
            await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–ª –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏
            
        except FloodWaitError as e:
            wait_time = e.seconds + 10
            print(f"üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram")
            time.sleep(wait_time)
            continue
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {topic['title']}: {str(e)}")
            continue
    
    return created_count

async def main():
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    
    try:
        print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        await client.connect()
        
        if not await client.is_user_authorized():
            print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            phone = "+–≤–∞—à_–Ω–æ–º–µ—Ä"
            
            try:
                await client.send_code_request(phone)
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
                
                try:
                    await client.sign_in(phone=phone, code=code)
                except SessionPasswordNeededError:
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                    await client.sign_in(password=password)
            
            except FloodWaitError as e:
                print(f"üö´ Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        me = await client.get_me()
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} ({me.phone})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã
        created = await create_topics(client)
        print(f"\n–°–æ–∑–¥–∞–Ω–æ —Ç–µ–º: {created}/{len(TOPICS)}")
        
        if created < len(TOPICS):
            print("‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ 10-15 –º–∏–Ω—É—Ç")
    
    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await client.disconnect()
        print("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º...")
    asyncio.run(main())
    print("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–Ω–æ —Å–ø–∞—Ç—å üò¥")
